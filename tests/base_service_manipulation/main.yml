
---
  - name: base service manipulation
    hosts: atomic
    become: yes
    vars:
        service_name: chronyd
    
    tasks:

    - name: Stop the service
      service:
        name: "{{ item }}"
        state: stopped
      with_items: "{{ service_name }}"

    - name: disable the service
      service:
          name: "{{ item }}"
          enabled: false
      with_items: "{{ service_name }}"

    - name: restart the machine
      shell: sleep 2 && shutdown -r now "Server is rebooting"
      async: 1
      poll: 0
      ignore_errors: true

    - name: waiting for server
      wait_for:
         host: "{{ inventory_hostname }}"
         state: started
         delay: 10
         timeout: 300
         port: 22
      delegate_to: localhost

    - command: "systemctl status {{ service_name }}"
      register: result
      ignore_errors: True
  
    - fail:
        msg: "Service running"
      when: result.rc != 3

    - name: Start the service
      service:
        name: "{{ item }}"
        state: started
      with_items: "{{ service_name }}"

    - command: "systemctl status {{ service_name }}"
      register: result
      ignore_errors: True
  
    - fail:
        msg: "Service  is not running"
      when: result.rc != 0


    - name: enable the service
      service:
          name: "{{ item }}"
          enabled: true
      with_items: "{{ service_name }}"

    - name: restart the machine
      shell: sleep 2 && shutdown -r now "Server is rebooting"
      async: 1
      poll: 0
      ignore_errors: true

    - name: waiting for server
      wait_for:
         host: "{{ inventory_hostname }}"
         state: started
         delay: 10
         timeout: 300
         port: 22
      delegate_to: localhost

    - command: "systemctl status {{ service_name }}"
      register: result
      ignore_errors: True
  
    - fail:
        msg: "Service not running"
      when: result.rc != 0
    

    - name: Stop the service
      service:
        name: "{{ item }}"
        state: stopped
      with_items: "{{ service_name }}"
    

    - name: disable the service
      service:
          name: "{{ item }}"
          enabled: false
      with_items: "{{ service_name }}"

    - name: restart the machine
      shell: sleep 2 && shutdown -r now "Server is rebooting"
      async: 1
      poll: 0
      ignore_errors: true

    - name: waiting for server
      wait_for:
         host: "{{ inventory_hostname }}"
         state: started
         delay: 10
         timeout: 300
         port: 22
      delegate_to: localhost

    - command: "systemctl status {{ service_name }}"
      register: result
      ignore_errors: True
  
    - fail:
        msg: "Service running"
      when: result.rc != 3

